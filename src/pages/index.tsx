import type { NextPage } from "next";
import Head from "next/head";

import { trpc } from "@/utils/trpc";
import { For } from "@/utils/component";
import { useRef } from "react";
import Link from "next/link";

const QuestionCreator: React.FC = () => {
  const inputRef = useRef<HTMLInputElement>(null);
  const client = trpc.useContext();
  const { mutate, isLoading } = trpc.useMutation("questions.create", {
    onSuccess: () => {
      client.invalidateQueries(["questions.get-all"]);
      if (!inputRef.current) return;
      inputRef.current.value = "";
    },
  });
  const onSubmit = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      mutate({ question: event.currentTarget.value });
    }
  };
  return (
    <div className="flex gap-2 p-2">
      <p>Add Question</p>
      <input
        ref={inputRef}
        className="bg-red-300"
        disabled={isLoading}
        onKeyDown={onSubmit}
      ></input>
    </div>
  );
};

const Home: NextPage = () => {
  const { data, isLoading } = trpc.useQuery(["questions.get-all"]);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="flex flex-col gap-2 p-2 font-medium">
          <QuestionCreator />
          <For each={data} fallback={<>Loading...</>}>
            {(item) => {
              return (
                <Link href={`/question/${item.id}`}>
                  <div className="flex flex-row gap-2 px-2" key={item.id}>
                    <p>ID: {item.id}</p>
                    <p>Question: {item.question}</p>
                  </div>
                </Link>
              );
            }}
          </For>
        </div>
      </main>
    </div>
  );
};

export default Home;
